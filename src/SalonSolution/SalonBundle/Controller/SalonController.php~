<?php

	namespace SalonSolution\SalonBundle\Controller;

	use Symfony\Component\Form\AbstractType;
	use Symfony\Component\Form\FormBuilderInterface;
	use SalonSolution\SalonBundle\Entity\SalonsolutionsUser;            //SalonsolutionsUser
	use SalonSolution\SalonBundle\Resources\SalonsolutionsUserType;  			  //SalonsolutionsUserType
	
	use SalonSolution\SalonBundle\Entity\SalonsolutionsSalon;            //SalonsolutionsUser
	use SalonSolution\SalonBundle\Resources\SalonsolutionsSalonType;  			  //SalonsolutionsUserType
	
	
	use SalonSolution\SalonBundle\Entity\SalonsolutionsService;            //SalonsolutionsService
	
	use SalonSolution\SalonBundle\Entity\SalonsolutionsCms;            //SalonsolutionsUser
																			//SalonsolutionsUser
	use SalonSolution\SalonBundle\Resources\SalonsolutionsCmsType;  			  //SalonsolutionsUserType
	
		use SalonSolution\SalonBundle\Entity\SalonsolutionsSalonImage;   

	use Symfony\Component\HttpFoundation\Request;   
	use Symfony\Component\HttpFoundation\Response;
	
	use Symfony\Component\HttpFoundation\Session\Session;
	use Symfony\Component\HttpFoundation\RedirectResponse;

	
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;
	
	use Symfony\Component\HttpFoundation\File\UploadedFile;



class SalonController extends Controller
{
	
    
    /**************************** Begin : Function to display login page ********************************/
	
		public function loginAction(Request $request)
        {
            
            
            $session = $this->getRequest()->getSession();
            
                $userSession = $this->getLoggedInUserDetailAction();    //function name given below 
                                                                         //check :- for enter dashoboard into the -path without  login then it will not show
                //echo "<PRE>";print_r($userSession);die;                                             
                if($userSession)
                {
                    if($session->get('salonUrl'))
                        return $this->redirect( $session->get('salonUrl') ); 
                    else
                        return $this->redirect($this->generateUrl('salon_solution_salon_dashboard'));  
                }	
				     
			$em = $this->getDoctrine()->getEntityManager();
			$repository = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			
				if ($request->getMethod() == 'POST')
				{
					$session->clear();
					$username = $request->get('username');        // echo "<pre>"; print_r($fetch_data);
					//$password = $request->get('password');   //echo $password;   die;   				
					$password = md5($request->get('password'));   //echo $password;   die;   				
				
					$user = $repository->findOneBy(array('username' => $username, 'password' => $password,'type' =>'2','status' =>'1'));
						
						//echo "<pre>"; print_r($user); die;
						
				if($user !='')
                    {
                                         
                         $session->set('userId', $user->getId());        
                         $setid = $session->get('userId', $user->getId());   
                            
                         $session->set('username', $user->getUsername());
                         $setname = $session->get('username');  
                         
                         $session->set('photo', $user->getPhoto());
                         $setphoto = $session->get('photo');  
                         
                         $em = $this->getDoctrine()->getEntityManager();
                         $repository = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon');
                         $salon = $repository->findOneBy(array( 'ownerId' => $user->getId() ));
                        // echo "<pre>"; print_r($salon); die;
                         
                         $domain = $salon->getDomain();
                         $salonName = $salon->getName();
                         
                         $session->set('salonUrl', 'http://'.$domain.'.salonSolutions.ca/salon/dashboard');
                         $session->set('salonName', $salonName);
                        
                         return $this->redirect('http://'.$domain.'.salonSolutions.ca/salon/dashboard');
                    }
					/*if($user !='')
					{
										 
						 $session->set('userId', $user->getId());    	
						 $setid = $session->get('userId', $user->getId());   
							
						 $session->set('username', $user->getUsername());
						 $setname = $session->get('username');  
						 
						 $session->set('photo', $user->getPhoto());
						 $setphoto = $session->get('photo');  
						 
						
						 
							return $this->redirect($this->generateUrl('salon_solution_salon_dashboard'));
					}*/
					else
					{	
						//$this->get('session')->getFlashBag()->set('error', 'Does Not Exist');

						//$this->session->getFlashBag()->add('notice', 'You have been successfully been logged out.');
							
					 echo "Please Enter your Correct name  OR Password"; 
					 
					}
							
				} 
				
				
								/*************************************************forgot password ****************************/
		
		$email=$this->get('request')->request->get('email');
			$em = $this->getDoctrine()->getEntityManager();
    		$repository = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
    		
    		if ($request->getMethod() == 'POST') 
        	{
           		 $user = $repository->findOneBy(array('email' => $email));
           		
           		//echo "<pre>"; print_r($email); die;
            		if ($user) 
            		{   
						$newPassword = $this->generateRandomString();   
						echo $newPassword;
						$encPass=md5($newPassword);
						$realtors = $em->createQueryBuilder()
						->select('SalonsolutionsUser')
						->update('SalonSolutionSalonBundle:SalonsolutionsUser',  'SalonsolutionsUser')
						->set('SalonsolutionsUser.password', ':password')
						->setParameter('password', $encPass)
						->where('SalonsolutionsUser.email=:email')
						->setParameter('email', $email)
						->getQuery()
						->getResult();
								
													
						$newPassword=  $this->generateRandomString();
					
						//password is encrypted into md5 
						$encPass=md5($newPassword); 
						$to = $email;
						$subject = "Password Reset";
						$txt=   "Hello <br><br>Your password has been reset on <br><br>Your new Password is: <b>".$newPassword."</b>";
						//$headers = "From: webmaster@example.com" . "\r\n" ;
						$headers = "MIME-Version: 1.0" . "\r\n";
						$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
						$headers .= "From: <support@salonSolution.com>" . "\r\n";
						 $retval = mail($to,$subject,$txt,$headers); //send mail      					 
						   if( $retval == true )
						   {
							  // return $this->render('SalonSolutionAdminBundle:Page:consumer_login.html.twig');
							
							  echo "Message sent successfully...";
						   }
						   else
						   {
							   //return $this->render('SalonSolutionAdminBundle:Page:consumer_forgotPassword.html.twig', array('name1' => 'Invalid Email'));
							  echo "Message could not be sent...";
						   }		  
											
					} 
				
		
			}		
							
			
			return $this->render('SalonSolutionSalonBundle:Page:login.html.twig');
		}
		
		public function getSalonAction($params)
		{
			$em = $this->getDoctrine()->getEntityManager();
			if( array_key_exists('criteria', $params) && $params['criteria'] == 'LIKE' )
			{
				$arrSalon = $em->createQueryBuilder()->select('Salon')
				->from('SalonSolutionWebBundle:SalonsolutionsSalon', 'Salon')
				->where('Salon.name LIKE :salonName')
				->setParameter('salonName', $params['salonSearchKey'].'%')
				->getQuery()
				->getArrayResult();
			}
			else if( array_key_exists('domainName', $params) && $params['domainName'] != '' )
			{
				$arrSalon = $em->createQueryBuilder()->select('Salon')
				->from('SalonSolutionWebBundle:SalonsolutionsSalon', 'Salon')
				->where('Salon.domain=:domainName')
				->setParameter('domainName', $params['domainName'])
				->getQuery()
				->getArrayResult();
			}
			else
			{
				$arrSalon = $em->createQueryBuilder()->select('Salon')
				->from('SalonSolutionWebBundle:SalonsolutionsSalon', 'Salon')
				->where('Salon.name=:salonName')
				->setParameter('salonName', $params['salonSearchKey'])
				->getQuery()
				->getArrayResult();
			}
			return $arrSalon;
		}
		
			
		function generateRandomString($length = 10) {
				return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
			}
		/*------------------------------- End : Function to display login page ------------------------------*/
			
		
			
		/**************************** Begin : Function to Login the customers ********************************/
	  
		public function logoutAction()
		{
			
			 $session = $this->getRequest()->getSession();
					$session->clear('foo');
					$session->remove('foo');
					unset($session);
						return $this->redirect($this->generateUrl('salon_solution_salon_login'));
			
			return $this->render('SalonSolutionSalonBundle:Page:logout.html.twig');
		}
		/*------------------------------- End : Function to Login the customers ------------------------------*/
		
	
		/**************************** Begin : Function to display home page ********************************/
		public function dashboardAction()
		{
			$session = $this->getRequest()->getSession(); 	
			
			$userSession = $this->getLoggedInUserDetailAction();         //function name given below 
					
		    $userId = $session->get('userId');	
		    
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon');
			$salons = $repository->findBy(array('ownerId' => $userId));
			$totalSalons = count($salons);
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			$consumers = $repository->findBy(array('parentId' => $userId));
			$totalConsumers = count($consumers);
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsAppointment');
			$Appointments = $repository->findAll();
			$totalAppointments = count($Appointments);
					
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsAdvertisement');
			$Advertisements = $repository->findAll();
			$totalAdvertisements = count($Advertisements);
					
			if($userSession)
			{
				return $this->render('SalonSolutionSalonBundle:Page:dashboard.html.twig', 
					array(
						'totalSalons'=> $totalSalons, 
						'totalConsumers'=> $totalConsumers,
						'totalAppointments'=> $totalAppointments,
						'totalAdvertisements'=> $totalAdvertisements
					)
				);
			}
			else
				return $this->redirect($this->generateUrl('salon_solution_salon_login'));   // check end
				
				
		}
		/*------------------------------- End : Function to display home page ------------------------------*/
		
		
		/**************************** Begin : Function to get the details of logged-in user ********************************/
		public function getLoggedInUserDetailAction()
		{
			 $session = $this->getRequest()->getSession();                     //check :- for enter dashoboard into the -
																				// path without  login then it will not show
			if( $session->get('userId') && $session->get('userId') != '' )
				return true;
			else
				return false;
		}
		/*------------------------------- End : Function to get the details of logged-in user ------------------------------*/
		
	
		/**************************** Begin : Function to Profile ********************************/
	  
		public function profileAction(Request $request)
		{
				
				
				
			$session = $this->getRequest()->getSession(); 			
		    $setid = $session->get('userId');		
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			$profilename = $repository->findOneBy(array('id' => $setid));		
			return $this->render('SalonSolutionSalonBundle:Page:profile.html.twig', array('profilename'=> $profilename));

			
		}
		/*------------------------------- End : Function to Profile ------------------------------*/
		
		/**************************** Begin : Function to Profile ********************************/
	  
		public function changeProfileImageAction(Request $request)
		{
			$session = $this->getRequest()->getSession();
			$userId = $session->get('userId');
			
			//$sourcePath = $file = $_FILES['file']['name'];
						
			 //$file1  = $_FILES['file']['tmp_name'];  
			//move_uploaded_file($_FILES["file"]["tmp_name"], "uploads/user/" . $_FILES["file"]["name"]);
			  
			$basePath = $this->getBasePathAction();	  
			$photo = $_FILES['file']['name'];  	
			$ranPhotoUpload = rand(1,10000);  		
			$targetFilePhoto = $basePath."/".$this->container->getParameter('gbl_uploadPath_customers').$ranPhotoUpload.$photo;
			move_uploaded_file($_FILES['file']['tmp_name'], $targetFilePhoto);		
			
			$em = $this->getDoctrine()->getEntityManager();
			$confirmedSubscribe = $em->createQueryBuilder() 
			
			->select('User')
			->update('SalonSolutionSalonBundle:SalonsolutionsUser',  'User')
			->set('User.photo', ':photo')
			->setParameter('photo', $ranPhotoUpload.$photo)
			->where('User.id = :id')
			->setParameter('id', $userId)
			->getQuery()
			->getResult();
			
			$session->set('photo', $ranPhotoUpload.$photo);
			
			
			return new response('SUCCESS');        
			
		}
					

		/*------------------------------- End : Function to Profile ------------------------------*/
		
		
		
		/**************************** Begin : Function to Profile ********************************/
	  
		public function profileAccountAction(Request $request)
		{
			$session = $this->getRequest()->getSession(); 			
		    $setid = $session->get('userId');		
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			$profileDetail = $repository->findOneBy(array('id' => $setid));	
				
				
			return $this->render('SalonSolutionSalonBundle:Page:profile_account.html.twig', array('profileDetail'=> $profileDetail));

			
			
		}
		/*------------------------------- End : Function to Profile ------------------------------*/
		
		
		/**************************** Begin : Function to Profile ********************************/
	  
		public function updateProfileAction()
		{
				
			$session = $this->getRequest()->getSession(); 			
		    $userId = $session->get('userId');		
			//print_r($_POST['firstName']);die('yes');
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			$profileDetail = $repository->findOneBy(array('id' => $userId));	
			
			$firstName = $_POST["firstName"];     	
			$lastName  = $_POST["lastName"];
			$username  = $_POST["username"];
			$email  =    $_POST["email"];
			$address  =  $_POST["address"];
			$state  = $_POST["state"];
			$city  = $_POST["city"];
			$zip  = $_POST["zip"];
			$mobile  = $_POST["mobile"];
			$landline  = $_POST["landline"];        			// echo "<pre>" ;  	print_r($mobile); die;
		
			$em = $this->getDoctrine()->getEntityManager();
			$profileDetail = $em->createQueryBuilder() 
			->select('profile')
			->update('SalonSolutionSalonBundle:SalonsolutionsUser',  'profile')
			->set('profile.firstName', ':firstName')
			->setParameter('firstName', $firstName)
			->set('profile.lastName', ':lastName')
			->setParameter('lastName', $lastName)
			->set('profile.username', ':username')
			->setParameter('username', $username)
			->set('profile.email', ':email')
			->setParameter('email', $email)
			->set('profile.address', ':address')
			->setParameter('address', $address)
			->set('profile.state', ':state')
			->setParameter('state', $state)
			->set('profile.city', ':city')
			->setParameter('city', $city)
			->set('profile.zip', ':zip')
			->setParameter('zip', $zip)
			->set('profile.mobile', ':mobile')
			->setParameter('mobile', $mobile)
			->set('profile.landline', ':landline')
			->setParameter('landline', $landline)
			->where('profile.id = :id')
			->setParameter('id', $userId)
			->getQuery()
			->getResult();
					
			return new response("SUCCESS");
		}
		/*------------------------------- End : Function to Profile ------------------------------*/
		
		
		/**************************** Begin : Function to Change Password ********************************/
	  
		public function changePasswordAction()
		{
			$session = $this->getRequest()->getSession(); 			
		    $userId = $session->get('userId');		
			//echo $userId."<PRE>";print_r($_POST);die;
			$em = $this->getDoctrine()->getEntityManager();
			$salonCurrentPassword = $em->createQueryBuilder() 
			->select('SalonsolutionsUser')
			->from('SalonSolutionSalonBundle:SalonsolutionsUser',  'SalonsolutionsUser')
			->where('SalonsolutionsUser.id = :id')
			->setParameter('id', $userId)
			->andwhere('SalonsolutionsUser.type = :type')
			->setParameter('type', 2)
			->andwhere('SalonsolutionsUser.status = :status')
			->setParameter('status', 1)
			->getQuery()
			->getResult();
			
			$currentPassword = $salonCurrentPassword[0]->password ;  //  echo "<PRE>";print_r($currentPassword);die;
			$oldPassword = $_POST["oldPassword"];     
			$newPassword = $_POST["newPassword"];     
			$repeatPassword = $_POST["repeatPassword"];     
			//echo $newPassword."----".$repeatPassword;die;
			$em = $this->getDoctrine()->getEntityManager();
			
			if( ($currentPassword == md5($oldPassword)) && ($newPassword == $repeatPassword) )
			{
				$queryUpdatePassword = $em->createQueryBuilder() 
				->select('SalonsolutionsUser')
				->update('SalonSolutionSalonBundle:SalonsolutionsUser',  'SalonsolutionsUser')
				->set('SalonsolutionsUser.password', ':password')
				->setParameter('password', md5($newPassword))
				->where('SalonsolutionsUser.id = :id')
				->setParameter('id', $userId)
				->getQuery()
				->getResult();
				
				// echo "<PRE>";print_r($newPasswords);die;
				return new response("SUCCESS");
			}
			else
			{
				if( $currentPassword != md5($oldPassword) )
				{
					return new response("OLD_MISMATCH");
				}
				else
				{
					return new response("NEW_MISMATCH");
				}
			}
		}
		/*------------------------------- End : Function to Change Password  ------------------------------*/
		
		
		/**************************** Begin : Function to Change Password ********************************/
	  
		public function changeImageAction()
		{
			$session = $this->getRequest()->getSession(); 			
		    $userId = $session->get('userId');		
			//print_r($_POST['firstName']);die('yes');
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			$profileDetail = $repository->findOneBy(array('id' => $userId));	
			
			
			
		}
		/*------------------------------- End : Function to Change Password  ------------------------------*/
	
		
		/**************************** Begin : Function to Manage Salons ********************************/
	  
		public function manageSalonsAction(Request $request)
		{
			$session = $this->getRequest()->getSession(); 			
		     $userId = $session->get('userId');		
		    //die;
			
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon');
			  $Salons = $repository->findBy(array('ownerId' =>  $userId));			
		
			
			return $this->render('SalonSolutionSalonBundle:Page:manage_salon.html.twig',array('Salons'=> $Salons));

			
		}
		/*------------------------------- End : Function to Manage Salons ------------------------------*/
		
		
		/**************************** Begin : Function to Images ********************************/
	  
		public function imagesAction($id, Request $request)
		{
				$salonId	= $id ;
			
				$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalonImage');
				$salonImages = $repository->findBy(array('salonId' =>  $salonId));				
			
				//echo "<pre>"; print_r($salonImages)  ; die;
			
			if ($request->getMethod() == 'POST') 
					{	
																
						//$salonId = $request->get("salonId");     echo  $salonId ; die;
						$basePath = $this->getBasePathAction();	 					
						$photo = $_FILES['photo']['name'];  	
							$ranPhotoUpload = rand(1,10000);  							
							$targetFileLogo = $basePath."/".$this->container->getParameter('gbl_uploadPath_salons').$ranPhotoUpload.$photo;
							move_uploaded_file($_FILES['photo']['tmp_name'], $targetFileLogo);					
					
						$salonImages = new SalonsolutionsSalonImage();
						
						$salonImages->setSalonId($salonId);   
						$salonImages->setImage($ranPhotoUpload.$photo);
						
						$em = $this->getDoctrine()->getEntityManager();
						$em->persist($salonImages);
						$em->flush();
						
							return $this->redirect($this->generateUrl('salon_solution_salon_images',array('id'=> $salonId)));
						
						}
						
			
			return $this->render('SalonSolutionSalonBundle:Page:images.html.twig',array('salonImages'=> $salonImages));

			
		}
		/*------------------------------- End : Function to Images ------------------------------*/
		
		
		/**************************** Begin : Function to View Salons ********************************/
	  
		public function deleteSalonImageAction()
		{
			$em = $this->getDoctrine()->getEntityManager();
		
			$deleteSalonImage = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalonImage')->find($_POST['imageId']);				
		
			if ($deleteSalonImage)
			{	
				$em->remove($deleteSalonImage);
				$em->flush();
				return new response('SUCCESS');   
				}
			
			return $this->render('SalonSolutionSalonBundle:Page:delete_image_gallery.html.twig');

		}
		/*------------------------------- End : Function to View Salons ------------------------------*/
		
		
		/**************************** Begin : Function to View Salons ********************************/
	  
		public function viewSalonAction($id, Request $request)
		{
		
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon');
			  $salonDetails = $repository->findBy(array('id' =>  $id));			
				
			//	echo "<pre>"; print_r($salonDetails); die;
			
			return $this->render('SalonSolutionSalonBundle:Page:view_salon.html.twig',array('salonDetails'=> $salonDetails));

			
		}
		/*------------------------------- End : Function to View Salons ------------------------------*/
		
		
			
		/**************************** Begin : Function to Add Salon ********************************/
			
		
		public function addSalonAction(Request $request)
		{
			$em = $this->getDoctrine()->getEntityManager();
			$salonOwners = $em->createQueryBuilder() 
			->select('SalonsolutionsUser')
			->from('SalonSolutionSalonBundle:SalonsolutionsUser',  'SalonsolutionsUser')
			->where('SalonsolutionsUser.type = :type')
			->setParameter('type', 2)
			->getQuery()
			->getResult();
			// echo "<pre>"; print_r($salonOwners); die;

					
			if ($request->getMethod() == 'POST') 
					{						
						$name = $request->get("name");  	
						$domain = $request->get("domain");
						$description = $request->get("description");	
						$address = $request->get("address");						
						$city = $request->get("city");
						$state = $request->get("state");
						$country = $request->get("country");
						$zip = $request->get("zip");  
						$mobile = $request->get("mobile"); 
						$landline = $request->get("landline"); 
						$owner_id = $request->get("owner_id"); 
						$basePath = $this->getBasePathAction();	 
					
						$logo = $_FILES['logo']['name'];  	
							$ranPhotoLogo = rand(1,10000);  							
							$targetFileLogo = $basePath."/".$this->container->getParameter('gbl_uploadPath_salons').$ranPhotoLogo.$logo;
							move_uploaded_file($_FILES['logo']['tmp_name'], $targetFileLogo);					
					
			
						$customer = new SalonsolutionsSalon();
						
						$customer->setName($name);   
						$customer->setDomain($domain);
						$customer->setDescription($description);
						$customer->setAddress($address);							
						$customer->setCity($city);							
						$customer->setState($state);							
						$customer->setCountry($country);							
						$customer->setZip($zip);							
						$customer->setMobile($mobile);							
						$customer->setLandline($landline);							
						$customer->setOwnerId($owner_id);							
						$customer->setLogo($ranPhotoLogo.$logo);
						
						$customer->setStatus('0');	
							
						$em = $this->getDoctrine()->getEntityManager();
						$em->persist($customer);
						$em->flush();
																					// next ---------> table insert
					
					
						return $this->redirect($this->generateUrl('salon_solution_salon_manageSalons'));  // redirect the page
				
			
					} 
				
		
			  	// echo "<pre>"; print_r($customers); die;
			
			return $this->render('SalonSolutionSalonBundle:Page:add_salon.html.twig', array('salonOwners' => $salonOwners));
		}			
		
		/*------------------------------- End : Function to Add Salon ------------------------------*/
		
		
		
		/**************************** Begin : Function to Manage Edit Salons ********************************/
	  
		public function editSalonAction($id, Request $request)
		{
			 
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon');
			 $updateSalonInformation = $repository->findBy(array('id' =>  $id));			
		
			if($request->getMethod() == 'POST')
			{				
				$name = $request->get("name");  	
				$domain = $request->get("domain");
				$description = $request->get("description");
				$address = $request->get("address");
				$country = $request->get("country");
				$state = $request->get("state");
				$city = $request->get("city");
				$zip = $request->get("zip");
				$mobile = $request->get("mobile");
				$landline = $request->get("landline");
				$basePath = $this->getBasePathAction();	
				$logo = $_FILES['logo']['name'];  	
					$ranPhotoLogo = rand(1,10000);  							
					$targetFileLogo = $basePath."/".$this->container->getParameter('gbl_uploadPath_salons').$ranPhotoLogo.$logo;
					move_uploaded_file($_FILES['logo']['tmp_name'], $targetFileLogo);					
			
		
				$em = $this->getDoctrine()->getEntityManager();
				$confirmedSubscribe = $em->createQueryBuilder() 
				->select('tblSalon')
				->update('SalonSolutionSalonBundle:SalonsolutionsSalon',  'tblSalon')
				->set('tblSalon.name', ':name')
				->setParameter('name', $name)
				->set('tblSalon.domain', ':domain')
				->setParameter('domain', $domain)
				->set('tblSalon.description', ':description')
				->setParameter('description', $description)
				->set('tblSalon.address', ':address')
				->setParameter('address', $address)
				->set('tblSalon.country', ':country')
				->setParameter('country', $country)
				->set('tblSalon.state', ':state')
				->setParameter('state', $state)
				->set('tblSalon.city', ':city')
				->setParameter('city', $city)
				->set('tblSalon.zip', ':zip')
				->setParameter('zip', $zip)
				->set('tblSalon.mobile', ':mobile')
				->setParameter('mobile', $mobile)
				->set('tblSalon.landline', ':landline')
				->setParameter('landline', $landline)
				->set('tblSalon.logo', ':logo')
				->setParameter('logo', $ranPhotoLogo.$logo)
				->where('tblSalon.id = :id')
				->setParameter('id', $id)
				->getQuery()
				->getResult();
								
				return $this->redirect($this->generateUrl('salon_solution_salon_manageSalons'));
				
			}			
			
			return $this->render('SalonSolutionSalonBundle:Page:edit_salon.html.twig',array('updateSalonInformation'=> $updateSalonInformation));

			
		}
		
		public function getBasePathAction()   		
		{
			$basePath = $_SERVER['DOCUMENT_ROOT'].$this->get('request')->getBaseUrl();
			return $basePath;
		}
		
		public function getBaseUrlAction()
		{
			$baseUrl = "http://".$_SERVER['HTTP_HOST'].$this->get('request')->getBaseUrl();
			return $baseUrl;
		}
		/*------------------------------- End : Function to Manage Edit Salons ------------------------------*/
		
		
		
		/**************************** Begin : Function to delete Salon ********************************/
		public function deleteSalonAction($id)
		{
			
			
				$em = $this->getDoctrine()->getEntityManager();
				$del = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon')->find($id);				
							
				if ($del) {
						$em->remove($del);
						$em->flush();
							return $this->redirect($this->generateUrl('salon_solution_salon_manageSalons'));  // redirect the page
						}
																				 //echo "<pre>"; print_r($deleteManageCoustomer); die;
			
			return $this->render('SalonSolutionSalonBundle:Page:manage_salon.html.twig');
		}
		/*------------------------------- End : Function to delete Salon ------------------------------*/
		
		
		
		
		/**************************** Begin : Function to Manage Consumers ********************************/
	  
		public function manageConsumersAction(Request $request)
		{
				$session = $this->getRequest()->getSession(); 			
		    $userId = $session->get('userId');		
			
				$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			  $Consumers = $repository->findBy(array('type' => '3','parentId' => $userId));			
			
			//echo "<pre>";	print_r($Consumers);   die();
			
			return $this->render('SalonSolutionSalonBundle:Page:manage_consumer.html.twig',array('Consumers'=> $Consumers));
			
			
		}
		/*------------------------------- End : Function to Manage Consumer ------------------------------*/
			
			
		/**************************** Begin : Function to View Consumer ********************************/
	  
		public function viewConsumerAction($id, Request $request)
		{
		
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			  $consumerDetails = $repository->findBy(array('id' =>  $id));			
				
			
			return $this->render('SalonSolutionSalonBundle:Page:view_consumer.html.twig',array('consumerDetails'=> $consumerDetails));

			
		}
		/*------------------------------- End : Function to View Consumer ------------------------------*/
		
		
		
		
			
		/**************************** Begin : Function to Add Consumer ********************************/
			
		
		public function addConsumerAction(Request $request)
		{
			$session = $this->getRequest()->getSession(); 			
		    $userId = $session->get('userId');		
			
					
			if ($request->getMethod() == 'POST') 
					{					
						$firstName = $request->get("firstName");  	
						$lastName = $request->get("lastName");
						$email = $request->get("email");
						$username = $request->get("username");	
						$password = $request->get("password");	
						$country = $request->get("country");						
						$state = $request->get("state");
						$address = $request->get("address");						
						$city = $request->get("city");						
						$zip = $request->get("zip"); 
						$mobile = $request->get("mobile"); 
						$landline = $request->get("landline"); 
						$parentId = $request->get("parentId"); 
						$basePath = $this->getBasePathAction();	  
						$photo = $_FILES['photo']['name'];  	
							$ranPhotoUpload = rand(1,10000);  		
							$targetFilePhoto = $basePath."/".$this->container->getParameter('gbl_uploadPath_consumers').$ranPhotoUpload.$photo;            //getBasePathAction() defined into upper 
							move_uploaded_file($_FILES['photo']['tmp_name'], $targetFilePhoto);					
					
						
						$consumer = new SalonsolutionsUser();
						
						$consumer->setFirstName($firstName);   
						$consumer->setLastName($lastName);
						$consumer->setUserName($username);
						$consumer->setPassword($password);
						$consumer->setEmail($email);
						$consumer->setCountry($country);								
						$consumer->setState($state);								
						$consumer->setAddress($address);								
						$consumer->setCity($city);								
						$consumer->setZip($zip);									
						$consumer->setMobile($mobile);									
						$consumer->setLandline($landline);									
						$consumer->setParentId($parentId);									
						$consumer->setPhoto($ranPhotoUpload.$photo);
						$consumer->setType('3');
						$consumer->setParentId($userId);
						$consumer->setStatus('1');	
							
						$em = $this->getDoctrine()->getEntityManager();
						$em->persist($consumer);
						$em->flush();
																					// next ---------> table insert
					//	$customerId = $customer->getId();
						
						return $this->redirect($this->generateUrl('salon_solution_salon_manageConsumers'));  // redirect the page
			
					} 
				
				
		
			  	// echo "<pre>"; print_r($customers); die;
			
			return $this->render('SalonSolutionSalonBundle:Page:add_consumer.html.twig');
		}			
		
		/*------------------------------- End : Function to Add Consumers ------------------------------*/
		
		
			
		
		/**************************** Begin : Function to Edit Consumers ********************************/
	  
		public function editConsumerAction($id, Request $request)
		{
			
			
				$session = $this->getRequest()->getSession(); 			
		    $userId = $session->get('userId');		
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			 $updateConsumerInformation = $repository->findBy(array('id' =>  $id));			
		
			
				//$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser');
			 // $Consumers = $repository->findBy(array('type' => '3','parentId' => $userId));			
			if($request->getMethod() == 'POST')
			{				
				$firstName = $request->get("firstName");  	
				$lastName = $request->get("lastName");
				$email = $request->get("email");
				$username = $request->get("username");
				$address = $request->get("address");
				$country = $request->get("country");
				$state = $request->get("state");
				$city = $request->get("city");
				$zip = $request->get("zip");
				$mobile = $request->get("mobile");
				$landline = $request->get("landline");
				$basePath = $this->getBasePathAction();					
				$photo = $_FILES['photo']['name'];  	
						$ranPhotoUpload = rand(1,10000);  		
						$targetFilePhoto = $basePath."/".$this->container->getParameter('gbl_uploadPath_consumers').$ranPhotoUpload.$photo;            //getBasePathAction() defined into upper 
					move_uploaded_file($_FILES['photo']['tmp_name'], $targetFilePhoto);					
			
		
				$em = $this->getDoctrine()->getEntityManager();
				$resultConsumer = $em->createQueryBuilder() 
				->select('tblconsumer')
				->update('SalonSolutionSalonBundle:SalonsolutionsUser',  'tblconsumer')
				->set('tblconsumer.firstName', ':firstName')
				->setParameter('firstName', $firstName)
				->set('tblconsumer.lastName', ':lastName')
				->setParameter('lastName', $lastName)
				->set('tblconsumer.email', ':email')
				->setParameter('email', $email)
				->set('tblconsumer.username', ':username')
				->setParameter('username', $username)
				->set('tblconsumer.address', ':address')
				->setParameter('address', $address)
				->set('tblconsumer.country', ':country')
				->setParameter('country', $country)
				->set('tblconsumer.state', ':state')
				->setParameter('state', $state)
				->set('tblconsumer.city', ':city')
				->setParameter('city', $city)
				->set('tblconsumer.zip', ':zip')
				->setParameter('zip', $zip)
				->set('tblconsumer.mobile', ':mobile')
				->setParameter('mobile', $mobile)
				->set('tblconsumer.landline', ':landline')
				->setParameter('landline', $landline)
				->set('tblconsumer.photo', ':photo')
				->setParameter('photo', $ranPhotoUpload.$photo)
				->where('tblconsumer.id = :id')
				->setParameter('id', $id)
				->getQuery()
				->getResult();		
				//echo "<pre>";	print_r($resultConsumer);   die();
				return $this->redirect($this->generateUrl('salon_solution_salon_manageConsumers'));
			}				
			
			return $this->render('SalonSolutionSalonBundle:Page:edit_consumer.html.twig',array('updateConsumerInformation'=> $updateConsumerInformation));
			
			
		}		

		/*------------------------------- End : Function to Edit Consumers ------------------------------*/
		
		
		
		/**************************** Begin : Function to Edit Consumers ********************************/
	  
		public function deleteConsumerAction($id, Request $request)
		{
				//echo $id; die;	
						
				$em = $this->getDoctrine()->getEntityManager();
					$del = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsUser')->find($id);				
			
				if ($del) {
						$em->remove($del);
						$em->flush();
							return $this->redirect($this->generateUrl('salon_solution_salon_manageConsumers'));  // redirect the page
						}
							
			
			return $this->render('SalonSolutionSalonBundle:Page:delete_consumer.html.twig');
			
			
		}		

		/*------------------------------- End : Function to Edit Consumers ------------------------------*/
		
		
		
		
		
		/**************************** Begin : Function to Manage Services ********************************/
	  
		public function manageServicesAction(Request $request)
		{
			
				$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsService');
				$Services = $repository->findAll();			
				
			//	echo "<pre>";	print_r($Services);   die();
		
			return $this->render('SalonSolutionSalonBundle:Page:manage_services.html.twig',array('Services'=> $Services));

			
		}
		/*------------------------------- End : Function to Manage Services ------------------------------*/
		
		
		
		/**************************** Begin : Function to Manage Services ********************************/
	  
		public function addServiceAction(Request $request)
		{
			$session = $this->getRequest()->getSession(); 			
			$userId = $session->get('userId');		
		
					
			$em = $this->getDoctrine()->getEntityManager();
			$Salonowner = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon')->findBy(array('ownerId' =>  $userId));						
				//echo "<pre>";	print_r($Salonowner);  	 die();	
				
				if ($request->getMethod() == 'POST') 
					{					
						$title = $request->get("title");  	
						$description = $request->get("description");  	
						$color = $request->get("color");  	
						$price = $request->get("price");  	
						$salonId = $request->get("salonId");  	
						$availability = $request->get("availability");    	
					
						$service = new SalonsolutionsService();
						
						$service->setTitle($title);  						 
						$service->setDescription($description);  						 
						$service->setColor($color);  						 
						$service->setPrice($price);  						 
						$service->setSalonId($salonId);  						 
						$service->setAvailability($availability);  	
						$service->setStatus('1');	
							
						$em = $this->getDoctrine()->getEntityManager();
						$em->persist($service);
						$em->flush();
						//return $this->redirect($this->generateUrl('salon_solution_salon_manageConsumers'));  // redirect the page
			
					} 
				
			//	echo "<pre>";	print_r($Services);   die();
		
			return $this->render('SalonSolutionSalonBundle:Page:add_services.html.twig',array('Salonowner'=> $Salonowner));

			
		}
		/*------------------------------- End : Function to Manage Services ------------------------------*/
		
		
		
		/**************************** Begin : Function to Manage Services ********************************/
	  
		public function editServiceAction($id, Request $request)
		{
			$session = $this->getRequest()->getSession(); 			
			$userId = $session->get('userId');		
		
					
			$em = $this->getDoctrine()->getEntityManager();
			$Salonowner = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon')->findBy(array('ownerId' =>  $userId));	
			
			
			$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsService');
			 $updateServiceInformation = $repository->findBy(array('id' =>  $id));			
				
					//echo "<pre>";	print_r($updateServiceInformation);   die();
					
			if($request->getMethod() == 'POST')
			{				
				$title = $request->get("title");  	
				$description = $request->get("description");  	
				$color = $request->get("color");  	
				$price = $request->get("price");  	
				$salonId = $request->get("salonId");  	
				$availability = $request->get("availability");    	
			
		
				$em = $this->getDoctrine()->getEntityManager();
				$confirmedSubscribe = $em->createQueryBuilder() 
				->select('tblService')
				->update('SalonSolutionSalonBundle:SalonsolutionsService',  'tblService')
				->set('tblService.title', ':title')
				->setParameter('title', $title)
				->set('tblService.description', ':description')
				->setParameter('description', $description)
				->set('tblService.color', ':color')
				->setParameter('color', $color)
				->set('tblService.price', ':price')
				->setParameter('price', $price)
				->set('tblService.salonId', ':salonId')
				->setParameter('salonId', $salonId)
				->set('tblService.availability', ':availability')
				->setParameter('availability', $availability)
				->where('tblService.id = :id')
				->setParameter('id', $id)
				->getQuery()
				->getResult();
								
				return $this->redirect($this->generateUrl('salon_solution_salon_manageServices'));
				
			}	
			return $this->render('SalonSolutionSalonBundle:Page:edit_service.html.twig',array('Salonowner'=> $Salonowner,'updateServiceInformation'=> $updateServiceInformation));

			
		}
		/*------------------------------- End : Function to Manage Services ------------------------------*/
		
		
		
		/**************************** Begin : Function to Manage Services ********************************/
	  
		public function deleteServiceAction($id, Request $request)
		{			
					$em = $this->getDoctrine()->getEntityManager();
					$del = $em->getRepository('SalonSolutionSalonBundle:SalonsolutionsService')->find($id);				
			
					if ($del) {
					$em->remove($del);
					$em->flush();
						return $this->redirect($this->generateUrl('salon_solution_salon_manageServices'));  // redirect the page
					}
						
			return $this->render('SalonSolutionSalonBundle:Page:delete_services.html.twig');

			
		}
		/*------------------------------- End : Function to Manage Services ------------------------------*/
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		/**************************** Begin : Function to Manage Appointments ********************************/
	  
		public function manageAppointmentsAction(Request $request)
		{
			
				$repository = $this->getDoctrine()->getRepository('SalonSolutionSalonBundle:SalonsolutionsSalon');
			    $Appointments = $repository->findAll();			
		
		
			return $this->render('SalonSolutionSalonBundle:Page:manage_appointments.html.twig',array('Appointments'=> $Appointments));

			
		}
		/*------------------------------- End : Function to Manage Appointments ------------------------------*/
		
			/**************************** Begin : Function to View Appointment ********************************/
	  
		public function viewAppointmentAction( Request $request)
		{
		
			return $this->render('SalonSolutionSalonBundle:Page:view_appointment.html.twig');

			
		}
		/*------------------------------- End : Function to View Appointment ------------------------------*/
		
		
		
		
		/**************************** Begin : Function to Manage Advertisements ********************************/
	  
		public function manageAdvertisementsAction(Request $request)
		{
			
			
			return $this->render('SalonSolutionSalonBundle:Page:manage_advertisements.html.twig');

			
		}
		/*------------------------------- End : Function to Manage Advertisements ------------------------------*/
		
			/**************************** Begin : Function to View Salons ********************************/
	  
		public function viewAdvertisementAction( Request $request)
		{
		
			
			return $this->render('SalonSolutionSalonBundle:Page:view_advertisement.html.twig');

			
		}
		/*------------------------------- End : Function to View Salons ------------------------------*/
		
		
		
		
		
		
		
		
	
}
